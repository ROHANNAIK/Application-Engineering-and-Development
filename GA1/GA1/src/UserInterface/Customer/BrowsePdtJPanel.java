/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.Business;
import Business.MarketOffer;
import Business.MarketOfferCatalog;
import Business.MasterOrderCatalog;
import Business.OrderItem;
import Business.OrderList;
import Business.Product;
import Business.Suppliers;
import Business.SupplierDirectory;
import UserInterface.Customer.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rohan
 */
public class BrowsePdtJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Business business;
    private OrderItem order;
    private OrderList orderList;
    private boolean isCheckedOut = false;

    /**
     * Creates new form BrowsePdtJPanel
     */
    public BrowsePdtJPanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        populateSupplierCombo();
        if (!isCheckedOut) {
            order = new OrderItem();
        }
        orderList = new OrderList();
    }

    public void populateSupplierCombo() {
        suppComboBox1.removeAllItems();
        for (Suppliers s : business.getSupplierDirectory().getSupplierdirectory()) {
            suppComboBox1.addItem(s);
        }
        populateTable();

    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);
        Suppliers supplier = (Suppliers) suppComboBox1.getSelectedItem();
        for (Product p : supplier.getProductCatalog().getProductCatalog()) {
            ArrayList<MarketOffer> marketOfferList = business.getMarketOfferCatalog().getMarketOfferList();
            for (MarketOffer marketOffer : marketOfferList) {
                if (marketOffer.getProduct().getProductId() == p.getProductId()) {
                    Object row[] = new Object[6];
                    row[0] = marketOffer.getProduct();
                    row[1] = marketOffer.getProduct().getProductId();
                    row[2] = marketOffer.getMarketOfferPrice();
                    row[3] = marketOffer.getMarket().getMarketName();
                    row[4] = marketOffer.getProduct().getAvail();
                    row[5] = marketOffer;
                    model.addRow(row);
                }
            }
        }
    }

    public void refreshProductTable(String word) {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);
        for (MarketOffer marketOffer : business.getMarketOfferCatalog().getMarketOfferList()) {
            if (marketOffer.getProduct().getProdname().equalsIgnoreCase(word)) {
                Object row[] = new Object[6];
                row[0] = marketOffer.getProduct();
                row[1] = marketOffer.getProduct().getProductId();
                row[2] = marketOffer.getMarketOfferPrice();
                row[3] = marketOffer.getMarket().getMarketName();
                row[4] = marketOffer.getProduct().getAvail();
                row[5] = marketOffer;
                
                model.addRow(row);
            }

        }
    }

    public void refreshOrderTable() {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0);
        for (OrderItem or : orderList.getOrderItemList()) {

            Object row[] = new Object[4];
            row[0] = or.getProduct();
            row[1] = or.getSalesPrice();
            row[2] = or.getQuantity();
            row[3] = or.getQuantity() * or.getSalesPrice();
            model.addRow(row);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        suppComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        viewProdjButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtSearchKeyWord = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        productTable.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Product Id", "Price", "Market", "Avail", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(5).setResizable(false);
            productTable.getColumnModel().getColumn(5).setPreferredWidth(0);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 680, 110));

        suppComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppComboBox1ActionPerformed(evt);
            }
        });
        add(suppComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 151, 28));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Supplier");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 110, 36));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SUPPLIER PRODUCT CATALOG");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 193, 414, 50));

        btnBack.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnBack.setText("<< BACK");
        btnBack.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 790, 140, 50));

        viewProdjButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        viewProdjButton2.setText("VIEW PRODUCT DETAIL");
        viewProdjButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewProdjButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewProdjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProdjButton2ActionPerformed(evt);
            }
        });
        add(viewProdjButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 160, 44));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("WELCOME TO BUY HUB!!");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        jLabel4.setIconTextGap(7);
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 16, 770, 73));

        addtoCartButton6.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addtoCartButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });
        add(addtoCartButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 380, 160, 38));

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 380, 47, 35));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("QUANTITY:");
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, 83, 32));

        btnSearchProduct.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSearchProduct.setText("SEARCH PRODUCT");
        btnSearchProduct.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSearchProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 120, 170, 40));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("SALES PRICE");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 380, 100, 34));
        add(txtSalesPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 390, 49, -1));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 153));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("ITEMS IN CART");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 500, 437, 60));

        orderTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        orderTable.setFont(new java.awt.Font("Times New Roman", 2, 16)); // NOI18N
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 580, 680, 147));

        btnRemoveOrderItem.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnRemoveOrderItem.setText("REMOVE");
        btnRemoveOrderItem.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRemoveOrderItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });
        add(btnRemoveOrderItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 790, 130, 50));

        btnCheckOut.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        btnCheckOut.setText("NEGOTIATE >>");
        btnCheckOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCheckOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 780, 140, 50));
        add(txtSearchKeyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 176, 29));
    }// </editor-fold>//GEN-END:initComponents

    private void suppComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppComboBox1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_suppComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void viewProdjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProdjButton2ActionPerformed
        // TODO add your handling code here:
        int row = productTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        Product p = (Product) productTable.getValueAt(row, 0);
        ViewProductDetailJPanel vpdjp = new ViewProductDetailJPanel(userProcessContainer, p, business.getMarketOfferCatalog());
        userProcessContainer.add("ViewProductDetailCustJPanel", vpdjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewProdjButton2ActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row.");
            return;
        }
        MarketOffer selectedMarketOffer = (MarketOffer) productTable.getValueAt(selectedRow, 5);
        int fetchQuantity = (Integer) quantitySpinner.getValue();
        if (fetchQuantity <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero.");
            return;
        }
        try {
            int salesPrice = Integer.parseInt(txtSalesPrice.getText());
            if (selectedMarketOffer.getFloorPrice() > salesPrice || selectedMarketOffer.getCeilingPrice() < salesPrice) {
                JOptionPane.showMessageDialog(null, "Sales Price cannot be less than the actual price.");
                return;
            }
            if (fetchQuantity <= selectedMarketOffer.getProduct().getAvail()) {
                boolean alreadyPresent = false;
                for (OrderItem ol : orderList.getOrderItemList()) {
                    if (ol.getMarketOffer().getProduct().getProductId() == selectedMarketOffer.getProduct().getProductId()
                            && ol.getMarketOffer().getMarket().getMarketName().equalsIgnoreCase(selectedMarketOffer.getMarket().getMarketName())
                            && ol.getSalesPrice() == salesPrice) {
                        int oldAvail = selectedMarketOffer.getProduct().getAvail();
                        int newAvail = oldAvail - fetchQuantity;
                        selectedMarketOffer.getProduct().setAvail(newAvail);
                        ol.setQuantity(fetchQuantity + ol.getQuantity());
                        alreadyPresent = true;
                        populateTable();
                        refreshOrderTable();
                        break;
                    }
                }
                if (!alreadyPresent) {
                    int oldAvail = selectedMarketOffer.getProduct().getAvail();
                    int newAvail = oldAvail - fetchQuantity;
                    selectedMarketOffer.getProduct().setAvail(newAvail);
                    orderList.addOrders(selectedMarketOffer.getProduct(), fetchQuantity, salesPrice, selectedMarketOffer);
                    populateTable();
                    refreshOrderTable();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Quantity is greater than availability");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid sales price");
            return;
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        String prodName = txtSearchKeyWord.getText();
        refreshProductTable(prodName);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        OrderItem ol = (OrderItem) orderTable.getValueAt(row, 0);
        int oldAvail = ol.getProduct().getAvail();
        int oldQty = ol.getQuantity();
        int newQty = oldAvail + oldAvail;
        ol.getProduct().setAvail(newQty);
        orderList.removeOrders(ol);
        JOptionPane.showMessageDialog(null, "Order removed from cart.");
        refreshOrderTable();
        populateTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (orderList.getOrderItemList().size() > 0) {
            
            int totalPriceOrder =0;
            for(OrderItem item: orderList.getOrderItemList()){
                totalPriceOrder = totalPriceOrder + item.orderItemTotal();
            }
            business.getMasterOrderCatalog().addOrders(orderList);
            JOptionPane.showMessageDialog(null, "Order placed Successfully.");
            order = new OrderItem();
            refreshOrderTable();
            populateTable();
            isCheckedOut = true;
        } else {
            JOptionPane.showMessageDialog(null, "No Order placed.");
            return;
        }

    }//GEN-LAST:event_btnCheckOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox suppComboBox1;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearchKeyWord;
    private javax.swing.JButton viewProdjButton2;
    // End of variables declaration//GEN-END:variables
}
